name: Publish Docker on main

on:
  push:
    branches: ['main']

  workflow_dispatch:
    inputs:
      linux_386:
        description: 'Build for linux/386'
        type: boolean
        default: true
      linux_amd64:
        description: 'Build for linux/amd64'
        type: boolean
        default: true
      linux_arm_v7:
        description: 'Build for linux/arm/v7'
        type: boolean
        default: true
      linux_arm64_v8:
        description: 'Build for linux/arm64/v8'
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: BsBlog/python-nogil

jobs:
  setup:
    name: Setup platforms
    runs-on: ubuntu-latest
    outputs:
      matrix_data: ${{ steps.set-platforms.outputs.matrix }}
    steps:
      - name: Generate platform matrix
        id: set-platforms
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PLATFORMS=""
            if [ "${{ inputs.linux_386 }}" = "true" ]; then PLATFORMS+="linux/386,"; fi
            if [ "${{ inputs.linux_amd64 }}" = "true" ]; then PLATFORMS+="linux/amd64,"; fi
            if [ "${{ inputs.linux_arm_v7 }}" = "true" ]; then PLATFORMS+="linux/arm/v7,"; fi
            if [ "${{ inputs.linux_arm64_v8 }}" = "true" ]; then PLATFORMS+="linux/arm64/v8,"; fi
            PLATFORMS=$(echo $PLATFORMS | sed 's/,$//')
          else
            PLATFORMS="linux/386,linux/amd64,linux/arm/v7,linux/arm64/v8"
          fi

          [ -z "$PLATFORMS" ] && PLATFORMS="linux/386,linux/amd64,linux/arm/v7,linux/arm64/v8"
          
          echo "Selected platforms: $PLATFORMS"
          MATRIX_JSON="{\"platforms\":[\"$(echo $PLATFORMS | sed 's/,/","/g')\"]}"
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  Build-and-Push:
    name: Build and push (${{ matrix.platform }})
    needs: setup
    runs-on: ubuntu-latest
    permissions: write-all
    strategy:
      matrix:
        platform: ${{ fromJson(needs.setup.outputs.matrix_data).platforms }}
    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h

      - name: Checkout
        uses: actions/checkout@main

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Login to Docker Hub
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Convert repository name to lowercase
        id: convert
        run: |
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          D_IMAGE_NAME=$(echo $IMAGE_NAME | cut -d'/' -f2)
          echo "D_IMAGE_NAME=$D_IMAGE_NAME" >> $GITHUB_ENV

      - name: Build and push single architecture
        uses: docker/build-push-action@master
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:latest-${{ matrix.platform | replace('/', '-') }}

  Create-Manifest:
    name: Create Multi-Arch Manifest
    needs: [setup, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Create manifest
        env:
          PLATFORMS: ${{ needs.setup.outputs.matrix_data }}
        run: |
          BASE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          MANIFEST_CMD="docker buildx imagetools create -t $BASE_IMAGE"
          
          ${{ toJson(needs.build-and-push.outputs) }}
          for platform in $(echo '${{ join(needs.build-and-push.*.matrix.platform) }}' | tr ' ' '\n' | sort -u); do
            safe_platform=$(echo $platform | sed 's|/|-|g')
            MANIFEST_CMD+=" $BASE_IMAGE-$safe_platform"
          done
          
          echo "执行命令: $MANIFEST_CMD"
          $MANIFEST_CMD

  Cleanup:
    name: Cleanup and Verification
    needs: [create-manifest]
    runs-on: ubuntu-latest
    steps:
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@main
        with:
          subject-name: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}
          subject-digest: ${{ needs.create-manifest.outputs.digest }}
          push-to-registry: true

      - name: Delete old workflow run
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
