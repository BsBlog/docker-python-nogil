name: Publish Docker on main

on:
  push:
    branches: ['main']

  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: BsBlog/python-nogil

jobs:
  Prepare:
    name: Prepare Environment
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Convert repository name to lowercase
        id: convert
        run: |
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          D_IMAGE_NAME=$(echo $IMAGE_NAME | cut -d'/' -f2)
          echo "D_IMAGE_NAME=$D_IMAGE_NAME" >> $GITHUB_ENV

      - name: Delete old Docker images
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          curl -X DELETE \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/users/${{github.repository_owner}}/packages/container/${{env.D_IMAGE_NAME}}

  Build-and-Push:
    name: Build and Push ${{ matrix.platform }}
    needs: Prepare
    runs-on: ${{ matrix.runner }}
    permissions: write-all
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            tag_suffix: amd64
          - platform: linux/386
            runner: ubuntu-latest
            tag_suffix: i386
          - platform: linux/arm64/v8
            runner: ubuntu-24.04-arm
            tag_suffix: arm64
          - platform: linux/arm/v7
            runner: ubuntu-24.04-arm
            tag_suffix: armv7
          - platform: linux/arm/v6
            runner: ubuntu-24.04-arm
            tag_suffix: armv6
          - platform: linux/ppc64le
            runner: ubuntu-latest
            tag_suffix: ppc64le
          - platform: linux/riscv64
            runner: ubuntu-latest
            tag_suffix: riscv64
          - platform: linux/s390x
            runner: ubuntu-latest
            tag_suffix: s390x
        
    steps:
      - name: Free Disk-Space
        run: |
          df -h
          sudo apt-get clean
          docker system prune -a -f
          sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc
          df -h

      - name: Checkout
        uses: actions/checkout@main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@master
        
      - name: Login to Registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Convert repository name to lowercase
        id: convert
        run: |
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          D_IMAGE_NAME=$(echo $IMAGE_NAME | cut -d'/' -f2)
          echo "D_IMAGE_NAME=$D_IMAGE_NAME" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@master
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.tag_suffix }}

  Create-Manifest:
    name: Create Multi-Arch Manifest
    needs: [Build-and-Push]
    runs-on: ubuntu-latest
    permissions: write-all
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@main
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
      
      - name: Login to Registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Convert repository name to lowercase
        id: convert
        run: |
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          D_IMAGE_NAME=$(echo $IMAGE_NAME | cut -d'/' -f2)
          echo "D_IMAGE_NAME=$D_IMAGE_NAME" >> $GITHUB_ENV

      - name: Create and push manifest list
        id: push
        run: |
          TAGS=("amd64" "i386" "arm64" "armv7" "armv6" "ppc64le" "riscv64" "s390x")
          SUCCESSFUL_IMAGES=""
          for tag in "${TAGS[@]}"; do
            IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-$tag"
            echo "Checking for image: $IMAGE_REF"
            if docker buildx imagetools inspect "$IMAGE_REF" > /dev/null 2>&1; then
              echo "Image found. Adding to merge list."
              SUCCESSFUL_IMAGES="$SUCCESSFUL_IMAGES $IMAGE_REF"
            else
              echo "Image not found for tag $tag. It may have failed to build."
            fi
          done
          
          echo "SUCCESSFUL_IMAGES=$SUCCESSFUL_IMAGES" >> $GITHUB_ENV
          
          if [ -n "$SUCCESSFUL_IMAGES" ]; then
            echo "Merging the following images into the 'latest' tag: $SUCCESSFUL_IMAGES"
            docker buildx imagetools create \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
              $SUCCESSFUL_IMAGES
          else
            echo "No successful images found to merge. Skipping manifest creation."
            exit 0
          fi
      
      - name: Delete Temporary Images
        run: |
          if [ -n "$SUCCESSFUL_IMAGES" ]; then
            echo "Deleting temporary images: $SUCCESSFUL_IMAGES"
            
            for image in $SUCCESSFUL_IMAGES; do
              echo "Processing image: $image"
              
              tag=$(echo "$image" | cut -d':' -f2)
              echo "Extracting tag: $tag from image: $image"
              
              echo "Deleting tag: $tag via API..."
              
              VERSION_RESPONSE=$(curl -s \
                -H "Authorization: token ${{ github.token }}" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/users/${{ github.repository_owner }}/packages/container/${{ env.D_IMAGE_NAME }}/versions?per_page=100")
              
              if [ $? -eq 0 ]; then
                VERSION_ID=$(echo "$VERSION_RESPONSE" | jq -r ".[] | select(.metadata.container.tags[] | contains(\"$tag\")) | .id")
                
                if [ "$VERSION_ID" != "null" ] && [ -n "$VERSION_ID" ]; then
                  echo "Found version ID: $VERSION_ID for tag: $tag"
                  
                  DELETE_RESPONSE=$(curl -s -X DELETE \
                    -H "Authorization: token ${{ github.token }}" \
                    -H "Accept: application/vnd.github+json" \
                    "https://api.github.com/users/${{ github.repository_owner }}/packages/container/${{ env.D_IMAGE_NAME }}/versions/$VERSION_ID")
                  
                  if [ $? -eq 0 ]; then
                    echo "Successfully deleted temporary image: $image (tag: $tag)"
                  else
                    echo "Failed to delete image: $image (tag: $tag). Response: $DELETE_RESPONSE"
                  fi
                else
                  echo "Could not find version ID for tag: $tag"
                fi
              else
                echo "Failed to get versions for image: $image. Response: $VERSION_RESPONSE"
              fi
            done
            
            echo "Temporary images cleanup completed"
          else
            echo "No temporary images to delete (SUCCESSFUL_IMAGES is empty)"
          fi

      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@main
      #   with:
      #     subject-name: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true

  Finalize:
    name: Finalize Workflow
    needs: Create-Manifest
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
